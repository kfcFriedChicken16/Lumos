"use client";

import { useState, useRef, useEffect } from 'react';
import { Upload, FileText, X, Loader2, CheckCircle } from 'lucide-react';
import { parsePdf, type PdfParseResult } from '@/lib/pdf-parser';
import { StudyPack } from '@/types/study';

interface PdfUploaderProps {
  onPdfProcessed: (studyPack: StudyPack) => void;
  onError: (error: string) => void;
}

export default function PdfUploader({ onPdfProcessed, onError }: PdfUploaderProps) {
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isClient, setIsClient] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // Ensure this only runs on client-side
  useEffect(() => {
    setIsClient(true);
  }, []);

  const handleFileSelect = async (files: FileList | null) => {
    if (!files || files.length === 0) return;
    
    const file = files[0];
    if (file.type !== 'application/pdf') {
      onError('Please select a PDF file');
      return;
    }

    setUploadedFile(file);
    setIsUploading(true);
    setUploadProgress(0);

    try {
      // Simulate progress
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 200);

      // Parse PDF
      const pdfResult = await parsePdf(file);
      
      clearInterval(progressInterval);
      setUploadProgress(100);

      // Generate basic study pack from PDF
      const studyPack: StudyPack = {
        topic: pdfResult.outline[0]?.title || 'PDF Content',
        subtopics: pdfResult.outline
          .filter(node => node.level <= 2)
          .map(node => node.title)
          .slice(0, 5), // Limit to 5 subtopics
        questions: [] // Would be generated by LLM in real implementation
      };

      // Simulate a brief delay for better UX
      setTimeout(() => {
        setIsUploading(false);
        onPdfProcessed(studyPack);
      }, 500);

    } catch (error) {
      console.error('PDF parsing error:', error);
      setIsUploading(false);
      onError('Failed to process PDF. Please try a different file.');
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    handleFileSelect(e.dataTransfer.files);
  };

  const clearFile = () => {
    setUploadedFile(null);
    setUploadProgress(0);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Don't render on server-side
  if (!isClient) {
    return (
      <div className="space-y-4">
        <div className="border-2 border-dashed border-orange-200 rounded-xl p-6 text-center">
          <div className="text-sm text-gray-500">Loading PDF uploader...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Upload Area */}
      <div
        className={`relative border-2 border-dashed rounded-xl p-6 text-center transition-all duration-200 ${
          isUploading
            ? 'border-orange-400 bg-orange-50'
            : 'border-orange-200 hover:border-orange-300 hover:bg-orange-50/50'
        }`}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <input
          ref={fileInputRef}
          type="file"
          accept=".pdf"
          onChange={(e) => handleFileSelect(e.target.files)}
          className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
          disabled={isUploading}
        />
        
        {isUploading ? (
          <div className="space-y-3">
            <Loader2 className="w-8 h-8 text-orange-500 animate-spin mx-auto" />
            <div className="text-sm font-medium text-orange-700">
              Processing PDF...
            </div>
            <div className="w-full bg-orange-200 rounded-full h-2">
              <div
                className="bg-orange-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${uploadProgress}%` }}
              />
            </div>
            <div className="text-xs text-orange-600">
              {uploadProgress}% complete
            </div>
          </div>
        ) : uploadedFile ? (
          <div className="space-y-3">
            <CheckCircle className="w-8 h-8 text-green-500 mx-auto" />
            <div className="text-sm font-medium text-green-700">
              PDF Ready!
            </div>
            <div className="flex items-center justify-center gap-2 text-xs text-gray-600">
              <FileText className="w-4 h-4" />
              <span>{uploadedFile.name}</span>
              <button
                onClick={clearFile}
                className="ml-2 p-1 hover:bg-red-100 rounded-full transition-colors"
              >
                <X className="w-3 h-3 text-red-500" />
              </button>
            </div>
          </div>
        ) : (
          <div className="space-y-3">
            <Upload className="w-8 h-8 text-orange-500 mx-auto" />
            <div className="text-sm font-medium text-gray-700">
              Upload PDF to Generate Study Pack
            </div>
            <div className="text-xs text-gray-500">
              Drag & drop or click to select
            </div>
            <div className="text-xs text-gray-400">
              Supports: .pdf files
            </div>
          </div>
        )}
      </div>

      {/* Instructions */}
      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
        <h4 className="text-sm font-medium text-blue-900 mb-1">
          ðŸ“š Best PDF Types for Study Packs:
        </h4>
        <ul className="text-xs text-blue-800 space-y-1">
          <li>â€¢ Academic textbooks with clear chapters</li>
          <li>â€¢ Course materials with numbered sections</li>
          <li>â€¢ Programming books with topic divisions</li>
          <li>â€¢ Research papers with structured headings</li>
        </ul>
      </div>
    </div>
  );
}
